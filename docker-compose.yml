version: '3.8'

services:
  # Бэкенд сервис (Go)
  backend:
    build:
      context: ./backend # Путь к директории с Dockerfile для бэкенда
      dockerfile: Dockerfile
    ports:
      - "8080:8080" # Пробрасываем порт 8080 контейнера на порт 8080 хоста
    environment:
      # Переменные окружения для конфигурации бэкенда
      # Эти значения будут использованы в config.go (через os.LookupEnv)
      - DB_HOST=postgres_db # Имя сервиса PostgreSQL в Docker Compose
      - DB_PORT=5432
      - DB_USER=auction_user # Используйте пользователя и пароль, которые вы ожидаете в PostgreSQL
      - DB_PASSWORD=auction_password
      - DB_NAME=auction_db
      - SERVER_PORT=8080
      - JWT_SECRET=your-very-strong-and-long-jwt-secret-key # ОБЯЗАТЕЛЬНО ЗАМЕНИТЕ НА СВОЙ СЕКРЕТНЫЙ КЛЮЧ
      - JWT_EXPIRES_IN_HOURS=72
    depends_on:
      - postgres_db # Бэкенд запустится после запуска сервиса БД
    restart: unless-stopped
    networks:
      - auction-network

  # Фронтенд сервис (React + Nginx)
  frontend:
    build:
      context: ./frontend # Путь к директории с Dockerfile для фронтенда
      dockerfile: Dockerfile
    ports:
      - "3000:80" # Пробрасываем порт 80 Nginx в контейнере на порт 3000 хоста
    depends_on:
      - backend # Фронтенд (Nginx) запустится после бэкенда, хотя это не строго обязательно для статики
    restart: unless-stopped
    networks:
      - auction-network
    # Важно: Фронтенд должен быть настроен на обращение к бэкенду по адресу,
    # доступному из браузера пользователя, т.е. http://localhost:8080/api/v1
    # или через прокси, если вы его настраиваете (например, если все идет через один домен).
    # В данном случае apiClient.js уже настроен на localhost:8080.

    # Сервис PostgreSQL
  postgres_db:
    image: postgres:15-alpine # Используем официальный образ PostgreSQL
    ports:
      - "5432:5432" # Пробрасываем стандартный порт PostgreSQL
    environment:
      - POSTGRES_USER=auction_user # Имя пользователя БД
      - POSTGRES_PASSWORD=auction_password # Пароль пользователя БД
      - POSTGRES_DB=auction_db # Имя базы данных, которая будет создана автоматически
    volumes:
      - postgres_data:/var/lib/postgresql/data # Сохраняем данные БД между перезапусками контейнера
    restart: unless-stopped
    networks:
      - auction-network

# Определяем сеть, чтобы сервисы могли общаться друг с другом по именам
networks:
  auction-network:
    driver: bridge

# Определяем том для сохранения данных PostgreSQL
volumes:
  postgres_data:
